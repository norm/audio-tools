#!/usr/bin/env perl
# github:norm:homedir:bin/rip
#
# Rip CDs in a paranoid, metadata-obsessed fashion.

use Modern::Perl;

use CDDB;
use Capture::Tiny       qw( capture );
use Config::Std         { def_sep => '=' };
use FileHandle;
use File::Path          qw( make_path );
use Getopt::Std;
use Lingua::EN::Titlecase;
use Pod::Usage;
use Readonly;
use Term::Menu;

$| = 1;

Readonly my $LEAD_OUT_TRACK     => 162;
Readonly my $METADATA_FILE      => 'metadata.conf';
Readonly my $WORKING_DIRECTORY  => $ENV{'RIP_TMP'} 
                                   // "${ENV{'HOME'}}/Music/rips";
Readonly my $EDITOR             => $ENV{'RIP_EDITOR'}
                                   // $ENV{'VISUAL'} 
                                   // $ENV{'EDITOR'} 
                                   // 'vi';
Readonly my %DEFAULT_TRACK_TAGS => ( 
        title  => '',
    );
Readonly my %DEFAULT_ALBUM_TAGS => ( 
        compilation => 'false',
        album       => '',
        artist      => '',
        year        => '1970',
        disk        => '1/1',
    );

my $cddb_results_cache;
my $cddbp   = CDDB->new()
              or die $!;
my %option  = get_options();
my $disc_id = get_disc_id();

# need a valid disc ID to continue
die "No disc ID found.\n"
    unless defined $disc_id;

say "-> DISC ID $disc_id\n";
my $directory = "${WORKING_DIRECTORY}/${disc_id}";
if ( ! -d $directory ) {
    make_path "$directory/wavs"
        or die "mkdir ${directory}: $!";
}
chdir $directory
    or die "chdir ${directory}: $!";



# STEP ONE
# query freedb for details, saving them into the scratch dir for this disk
if ( defined $option{'q'} ) {
    my $cddb_details = get_disk_cddb_details();
    write_details_to_config( $cddb_details );
    open_conversion_directory();
    system "${EDITOR} ${METADATA_FILE}";
}

# read in the metadata details
read_config $METADATA_FILE, my %temp_config;

# STEP TWO
# rip the WAV files from the CD to the scratch directory
rip_tracks_from_cd( \%temp_config )
    if defined $option{'r'};

# after ripping the tracks eject the CD, as we are done with it
system "drutil eject"
    if defined $option{'j'};

# re-read the metadata details, as in normal operation they are updated
# during the CD ripping so may have changed by this point
# pause here if using -a, to allow more time if necessary
if ( $option{'a'} ) {
    print "

        Before continuing, ensure you have:

    *   made any required modifications to the source audio
        (splitting tracks, etc.)
    *   entered the correct titles, artists, years, etc. into the 
        description file
    *   scanned the cover image and saved it as 'cover.jpg'

        Pressing [^C] now will interrupt this process. You can always return
        to the job later with the command 'rip -emi ${disc_id}'.
";
    my $continue = <>;
}
read_config $METADATA_FILE, my %config;

# STEP THREE
# encode the WAV files to AAC
convert_tracks_to_aac( \%config )
    if defined $option{'e'};

# STEP FOUR
# add metadata to the AAC files
tag_converted_tracks( \%config )
    if defined $option{'m'};

print <<EOF;

'${config{''}{'artist'}} - ${config{''}{'album'}}' done.
EOF
exit;



sub get_options {
    my %option;
    
    # no arguments implies -a
    if ( -1 == $#ARGV ) {
        unshift @ARGV, '-a';
    }
    
    getopts( 'aehi:jmnqrt:', \%option );
    print_help_and_exit() if defined $option{'h'};
    
    # -a implies -qrem
    if ( defined $option{'a'} ) {
        $option{'q'} = 1;
        $option{'r'} = 1;
        $option{'e'} = 1;
        $option{'j'} = 1;
        $option{'m'} = 1;
    }
    
    return %option;
}
sub print_help_and_exit {
    pod2usage( {
        '-verbose' => 3,
        '-exitval' => 0,
    } );
}
sub get_disc_id {
    if ( !defined $option{'i'} ) {
        return get_disc_id_from_disc();
    }
    else {
        # tab completion gives a slash on dirs, so remove it first
        $option{'i'} =~ s{/$}{};
    }
    return $option{'i'};
}
sub get_disc_id_from_disc {
    my @disk_info = get_disk_info();
    return $disk_info[0];
}
sub get_disk_info {
    my @disk_toc = calculate_disk_toc();
    
    return
        unless scalar @disk_toc;
    return $cddbp->calculate_id( @disk_toc );
}
sub calculate_disk_toc {
    my @toc;
    my $lead_out;
    my $current_track  = 1;
    my $handle         = FileHandle->new( "cdparanoia --query 2>&1 |" )
                         or die "$!";
    
    while ( my $line = <$handle> ) {
        my $current_track_regexp = qr{
                ^
                track_num [ ] = [ ] ${current_track} [ ]
                start [ ] sector [ ] \d+ [ ] msf: [ ]
                (\d+),
                (\d+),
                (\d+)
            }x;
        my $lead_out_track_regexp = qr{
                ^
                track_num [ ] = [ ] ${LEAD_OUT_TRACK} [ ]
                start [ ] sector [ ] \d+ [ ] msf: [ ]
                (\d+),
                (\d+),
                (\d+)
            }x;
        
        if ( $line =~ $current_track_regexp ) {
            push @toc, "$current_track $1 $2 $3";
            $current_track++;
        }
        elsif ( $line =~ $lead_out_track_regexp ) {
            $lead_out = "999 $1 $2 $3";
        }
    }
    
    return
        unless scalar @toc;
    
    push @toc, $lead_out;
    
    return @toc;
}

sub get_disk_cddb_details {
    my $disk;
    my @disk_info = get_disk_info();
    my @disks     = $cddbp->get_discs( 
                        $disk_info['0'],
                        $disk_info['3'],
                        $disk_info['4']
                    );
    
    if ( 0 <= $#disks ) {
        $disk = pop @disks;
    }
    else {
        # choose from multiple matches:
        my $count = 0;
        my( %menu, $key );
        
        foreach my $option ( @disks ) {
            my $id    = $option->['1'];
            my $title = $option->['2'];
               $key   = chr( ord('a') + $count );
            
            $menu{ $count } = [ $title, $key ];
            $count++;
        }
        $key = chr( ord('a') + $count );
        $menu{ $count } = [ "None of the above", $key ];
        
        my $options = Term::Menu->new(
                beforetext => 'Multiple matches - choose from the following:',
                aftertext  => '',
                tries      => 0,
            );
        my $answer  = $options->menu( %menu );

        $disk = $disks[ $answer ];
    }
    
    my $result = $cddbp->get_disc_details( $disk->['0'], $disk->['1'] );
    
    # if no data was retrieved, create a dummy entry
    if ( !defined $result ) {
        $result = {
                discid => $disk_info['0'],
                dtitle => 'Unknown Artist / Unknown Album'
            };
        foreach my $track ( @{ $disk_info['1'] } ) {
            push @{ $result->{'ttitles'} }, "Track $track";
        }
    }
    
    return $result;
}
sub write_details_to_config {
    my $details = shift;
    
    my %config;
    my $case = Lingua::EN::Titlecase->new();
    my( $artist, $title, $disk ) 
        = extract_info_from_title( $details->{'dtitle'} );

    foreach my $tag ( keys %DEFAULT_ALBUM_TAGS ) {
        $config{''}{ $tag } = $DEFAULT_ALBUM_TAGS{ $tag };
    }
    
    $config{''}{'artist'} = $artist;
    $config{''}{'album'}  = $title;
    $config{''}{'year'}   = $details->{'dyear'}
                            if defined $details->{'dyear'};
    $config{''}{'genre'}  = $details->{'genre'}
                            if defined $details->{'genre'};
    $config{''}{'disk'}   = "${disk}/?"
                            if defined $disk;
    
    my $various_artists = is_various_artists( $details );
    if ( $various_artists ) {
        $config{''}{'artist'}          = "Various Artists";
        $config{''}{'original_artist'} = $artist;
        $config{''}{'compilation'}     = 'true';
    }
    
    my $current_track = 1;
    foreach my $track ( @{ $details->{'ttitles'} } ) {
        my $track_number = sprintf '%02d', $current_track;
        
        foreach my $tag ( keys %DEFAULT_TRACK_TAGS ) {
            $config{ $track_number }{ $tag } = $DEFAULT_TRACK_TAGS{ $tag };
        }
        
        if ( $various_artists ) {
            my ( $artist, $title ) = get_artist_and_title( $track );
            $config{ $track_number }{'artist'} = $artist;
            $config{ $track_number }{'title'}  = $case->title( $title );
        }
        else {
            $config{ $track_number }{'title'} = $case->title( $track );
        }
        
        $current_track++;
    }
    
    write_config %config, $METADATA_FILE;
    
    # massage the default output of Config::Std a little
    {
        local $/;
        
        my $handle = FileHandle->new( $METADATA_FILE, 'r' );
        my $contents = <$handle>;
        undef $handle;
        
        # remove extraneous blank lines
        $contents =~ s{\n\n}{\n}gs;
        
        # blank lines before tracks
        $contents =~ s{\n\[}{\n\n[}gs;
        
        # comment out "original artist"
        $contents =~ s{^original_artist =}{# original_artist =}m;
        
        # add a comment to the first track
        my $comment = "# tracks can also over-ride options, such as:\n"
                    . "#   artist = <track artist>\n"
                    . "#   genre  = <track genre>\n"
                    . "#   year   = <track year>\n"
                    . "#\n"
                    . "# other options:\n"
                    . "# grouping = <grouping>\n"
                    . "# comment = [instrumental]\n\n";
        $contents =~ s{^(.*?\n)\[}{${1}${comment}\[}s;
        
        $handle = FileHandle->new( $METADATA_FILE, 'w' );
        print {$handle} $contents;
    }
}
sub extract_info_from_title {
    my $text = shift;
    
    my $artist_title_split_regexp = qr{
            ^
            \s*
            (.*)                # artist
            [ ] [/] [ ]
            (.*?)               # album title
            \s*
            (?:                 # optional " - CD2" rider
                (?: [-] \s* )
                CD \s* (\d+)
            )?
            $
        }x;
    
    if ( $text =~ $artist_title_split_regexp ) {
        return $1, $2, $3;
    }
    
    return $text, '', '';
}
sub is_various_artists {
    my $details = shift;
    
    # check each track
    foreach my $track ( @{ $details->{'ttitles'} } ) {
        my ( $artist, $track ) = get_artist_and_title( $track, 1 );
        
        if ( !defined $artist ) {
            return 0;
        }
    }
    
    return 1;
}
sub get_artist_and_title {
    my $track     = shift;
    my $no_prompt = shift;
    
    my $split_by_slash = qr{
            ^
            (?<first> .*? )
            \s*
            /
            \s*
            (?<second> .* )
            $
        }x;
    if ( $track =~ $split_by_slash ) {
        my $should_prompt = !defined $option{'artist_first'}
                         && !$no_prompt;
        
        if ( $should_prompt ) {
            my %menu = (
                    artist => [ 'Artist First', 'a' ],
                    title  => [ 'Title First',  't' ],
                );

            my $options = Term::Menu->new(
                    beforetext => "\nTrack 1: $track\n"
                                  . "\nHow are the track names split?",
                    aftertext  => '',
                    tries      => 0,
                );
            my $answer  = $options->menu( %menu );
            
            $option{'artist_first'} = ( 'artist' eq $answer );
        }
        
        if ( $option{'artist_first'} ) {
            return( $+{'first'}, $+{'second'} );
        }
        else {
            return( $+{'second'}, $+{'first'} );
        }
    }
    return( undef, $track );
}
sub open_conversion_directory {
    system "open -a Finder ."
        unless $option{'n'};
}
sub rip_tracks_from_cd {
    my $details = shift;
    
    my @tracks = get_affected_tracks( $details );
    
    say sprintf '%s - %s', $details->{''}{'artist'}, $details->{''}{'album'};
    say "Ripping tracks: ", join( ' ', @tracks ), '.';

    foreach my $track ( @tracks ) {
        my $title = $details->{ $track }{'title'};
        print "\n$track. $title\n";     # FIXME - or rather, fix cdparanoia
        system "cdparanoia -qP ${track} wavs/${track}.wav";
    }
}
sub get_affected_tracks {
    my $details = shift;
    my @tracks;
    
    if ( defined $option{'t'} ) {
        # look for range
        if ( $option{'t'} =~ m{^ (\d+) - (\d+) $}x ) {
            foreach my $item ( $1 .. $2 ) {
                push @tracks,
                    sprintf( '%02d', $item );
            }
        }
        else {
            # work out possible multiple options
            my $track = $option{'t'};
            
            while ( $track =~ s{^ (\d+) ,? }{}x ) {
                push @tracks,
                    sprintf( '%02d', $1 );
            }
        }
    }
    else {
        foreach my $item ( sort keys %{ $details } ) {
            next unless $item;
            push @tracks, $item;
        }
    }
    
    return @tracks;
}

sub convert_tracks_to_aac {
    my $details = shift;
    
    print "CONVERTING:";
    
    # convert them to AAC
    my @tracks = get_affected_tracks( $details );
    foreach my $track ( @tracks ) {
        system 'afconvert',
               '--soundcheck-generate',
               '-f', 'm4af',
               '-d', 'aac',
               '-s', '3',
               '-u', 'vbrq', '127',
               "wavs/${track}.wav";

        rename "wavs/${track}.m4a", "${track}.m4a";
        print " $track";
    }
    
    print "\n";
}
sub tag_converted_tracks {
    my $details = shift;
    
    print "TAGGING:   ";
    
    my @tracks = get_affected_tracks( $details );
    foreach my $track ( @tracks ) {
        # remove artwork, otherwise it is not properly replaced
        my ( $out, $err ) = capture {
            system(
                    'AtomicParsley',
                    qq(${track}.m4a),
                    '--artwork',
                    'REMOVE_ALL',
                );
        };
        
        say $err unless $err =~ m{^\s*$};
        
        # apply new metadata
        my @options = get_atomic_parsley_options( $details, $track );
        
        ( $out, $err ) = capture {
            system(
                    'AtomicParsley',
                    qq(${track}.m4a),
                    @options,
                );
        };
        
        say $err unless $err =~ m{^\s*$};
        system( "mv ${track}-temp*.m4a ${track}.m4a" );
        
        print " $track";
    }
    print "\n";
}
sub get_atomic_parsley_options {
    my $details = shift;
    my $track   = shift;
    
    my $track_number = sprintf '%02d', $track;
    
    my %options;
    my @options;
    my $tracks  = count_tracks( $details );
    
    # push @options, '--overWrite',
    push @options, 
                   '--tracknum',
                   qq(${track}/${tracks});
    
    # album-wide options
    foreach my $option ( keys %{ $details->{''} } ) {
        if ( 'artist' eq $option ) {
            $options{'albumArtist'} = $details->{''}{ $option };
            $options{'artist'}      = $details->{''}{ $option };
        }
        else {
            $options{ $option }     = $details->{''}{ $option };
        }
    }
    
    # over-ride with per-track options
    foreach my $option ( keys %{ $details->{ $track_number } } ) {
        $options{ $option } = $details->{ $track_number }{ $option };
    }
    
    # add options to command line string
    foreach my $option ( keys %options ) {
        my $value  = $options{ $option };
        push @options, qq(--$option), $value;
    }
    
    # add artwork if it exists
    push @options, '--artwork', 'cover.jpg'
        if -f "cover.jpg";
    push @options, '--artwork', 'cover.jpeg'
        if -f "cover.jpeg";
    
    return @options;
}
sub count_tracks {
    my $config = shift;
    
    # count the tracks based upon config entries only
    my $tracks = 0;
    foreach my $key ( keys %{ $config } ) {
        next if '' eq $key;
        $tracks++;
    }
    
    return $tracks;
}

__END__

=pod

=head1 NAME

B<rip> - rip CDs into AAC format with metadata

=head1 SYNOPSIS

B<rip> [B<-i> I<id>] [B<-a> | B<-qrejm>]
[B<-t> I<num[,num...]> | B<-t> I<low-high>]

=over

=item B<-i> I<id>

Apply the command to the previously ripped CD with a discid of I<id>. Useful
when re-encoding or re-tagging a previously ripped CD with updated settings.

=item B<-a>

Apply "all" steps (freedb query, rip, encode and tag with metadata).
Without any other arguments, this is the default behaviour.

=item B<-q>

Query freedb for track information on the current CD.

=item B<-r>

Rip the current CDs tracks to disk.

=item B<-e>

Encode the ripped WAV files as AAC, using afconvert set to the
highest quality VBR setting.

=item B<-j>

Eject the CD once ripping has occurred.

=item B<-m>

Tag the converted AAC files with metadata (as specified in the
C<metadata.conf> file and the cover image C<cover.jpg> as stored in the
same folder as the ripped files.

=item B<-t> I<num[,num...]> | B<-t> I<low-high>

Only apply the comment to the track I<num> (can be comma-separated for
multiple tracks); or to the tracks in the range I<low> to I<high>.

=back

=head1 ENVIRONMENT

The following environment variables affect the option of rip:

=over

=item RIP_TMP

Where to keep the ripped WAV files, converted AAC files and metadata.
Default: C<$HOME/Music/rips>.

=item RIP_EDITOR

Which text editor to use to edit the metadata files (the editor is launched
automatically after a query operation). Default: $VISUAL or $EDITOR or C<vi>.

=back

=head1 NOTES

This script is probably not going to work for anyone that doesn't:

=over

=item a)

have a patched version of cdparanoia to take the -P option which I use to
indicate "print progress even when the quiet flag is in operation" (because
I like to see the ripping status, but not the rest of the bumph),

=item b)

run it on Mac OS X, or other system for which afconvert has been compiled

=back

But it could serve as a learning exercise on quick scripts that blossom into
huge scripts.

=head1 AUTHOR

Mark Norman Francis, <http://marknormanfrancis.com/>
