#!/usr/bin/env perl
# github:norm:homedir:bin/rip
#
# Extract the audio from YouTube videos/playlists 

use Modern::Perl    '2012';
use Capture::Tiny   'capture_stdout';
use Getopt::Std;
use JSON;
use Pod::Usage;



my %option = ();
getopts( 'a:fhnrs:v', \%option );

pod2usage( -verbose => 1 ) if $option{'h'};

my $count = 0;
foreach my $id ( @ARGV ) {
    rip_videos( $id );
}
exit;



sub rip_videos {
    my $video_or_playlist = shift;

    my @args = ( '--dump-json' );
    push @args, '--write-thumnail'
        if !-f 'poster.jpg' && !-f 'poster.png';

    my $video_ids = capture_stdout {
            system 'youtube-dl', @args, $video_or_playlist;
        };

    my @videos = split '\n', $video_ids;
    my $total  = scalar @videos;

    foreach my $json ( @videos ) {
        my $data = from_json( $json );
        $count++;

        my $id      = $data->{'id'};
        my $artist  = $data->{'uploader'};
        my $album   = $option{'a'} // $data->{'playlist'} // 'YouTube';

        my $title   = $data->{'fulltitle'};
        $title =~ s{\s*$album\s*}{}g
            if $option{'n'};

        $title =~ s{$option{'s'}}{}g
            if $option{'s'};

        my $artwork = $data->{'_filename'};
        $artwork =~ s{\.[^\.]+$}{.jpg};

        my $date = $data->{'upload_date'};
        $date = sprintf '%d-%02d-%02dT12:00:00Z',
                    substr( $date, 0, 4 ),
                    substr( $date, 4, 2 ),
                    substr( $date, 6, 2 );

        my $filename = sprintf '%02d - %s.m4a', $count, $title;
        $filename =~ s{[^\w\s\._-]}{ }g;
        $filename =~ s{\s+}{ }g;
        $filename =~ s{^[\s\.]*(.*?)[\s\.]*$}{$1};

        if ( !-f $filename or $option{'r'} ) {
            say "Ripping [${count}/${total}] ${id} ${title}";

            download_youtube_video( $id );
            extract_wav_from_video( $id );
            convert_wav_to_m4a( $id );
            add_metadata_to_m4a(
                $title, $id, $artist, $album, $total, $artwork, $date );

            rename "${id}.m4a", $filename;
            cleanup_files( $id, $artwork )
                unless $option{'f'};
        }
        else {
            say "Ripped  [${count}/${total}] ${id} ${title}";
        }
    }
}
sub download_youtube_video {
    my $id = shift;

    return if -f "${id}.mp4";

    my @args;
    push @args, '-q'
        unless $option{'v'};

    system 'youtube-dl', @args,
                '-o', '%(id)s.mp4', '--', $id;

    die sprintf "Error downloading, exit code %s\n", $? >> 8
        if $?;
}
sub extract_wav_from_video {
    my $id = shift;

    return if -f "${id}.wav";

    my @args = ( '-y' );
    push @args, '-loglevel', 'panic'
        unless $option{'v'};

    system  'ffmpeg', @args,
                '-i',  "./${id}.mp4", "./${id}.wav";
    
    die sprintf "Error extracting audio, exit code %s\n", $? >> 8
        if $?;
}
sub convert_wav_to_m4a {
    my $id = shift;

    unlink "${id}.mp4";

    my @args = (
            '--soundcheck-generate',
            '-f', 'm4af',
            '-d', 'aac',
            '-s', '3',
            '-u', 'vbrq', '127',
        );
    push @args, '-v'
        if $option{'v'};

    system  'afconvert', @args,
            "./${id}.wav";
}
sub add_metadata_to_m4a {
    my $title   = shift;
    my $id      = shift;
    my $artist  = shift;
    my $album   = shift;
    my $total   = shift;
    my $artwork = shift;
    my $date    = shift;

    my $return = 0;
    my $output = capture_stdout {
        my @args = (
                '--overWrite',
                '--title',          $title,
                '--album',          $album,
                '--artist',         $artist,
                '--albumArtist',    'Various Artists',
                '--purchaseDate',   $date,
                '--year',           substr( $date, 0, 4 ),
                '--tracknum',       "${count}/${total}",
                '--comment',        "[youtube:${id}]",
            );
        push @args, '--artwork', 'poster.jpg'
            if -f 'poster.jpg';
        push @args, '--artwork', 'poster.png'
            if -f 'poster.png';
        push @args, '--artwork', $artwork
            if -f $artwork;

        $return = system 'AtomicParsley',
                        "./${id}.m4a",
                        @args;
    };

    die sprintf "Error writing metadata, exit code %s\n%s",
            $return >> 8, $output
                if $return;

    say $output
        if $option{'v'};
}
sub cleanup_files {
    my $id      = shift;
    my $artwork = shift;

    unlink "./${id}.wav", "./${id}.mp4", $artwork;
}

__END__

=pod

=head1 NAME

B<youtube-rip> - rip the audio from YouTube videos

=head1 SYNOPSIS

=over

=item youtube-rip [-a <album name>] [-f] [-n] [-s <text>] [-v]  B<URL-or-ID> [...]

=item youtube-rip -h

=back

Fetches videos, extracts their audio to a WAV file with C<ffmpeg>, converts
that to C<m4a> with C<afconvert> and then adds metadata with C<AtomicParsley>.

The album art will be the video thumbnail. This can be overriden by putting a
file C<poster.png> or C<poster.jpg> exists in the current directory.

Will not (by default) re-rip existing rips, so can be used over and over on
a growing playlist.

=head1 OPTIONS

=over 

=item URL-or-ID

The URL to a YouTube video or playlist, or the ID of a video.

=item -a <name>

Uses <name> as the album in the output file's metadata. The default for a
video in playlist is the name of the playlist, or 'YouTube' for a single
video.

=item -f

Don't clean up temporary files (the downloaded video, extracted C<wav> and
video thumbnail).

=item -r 

Re-rip the audio from videos, even if a previous C<m4a> file exists.

=item -n

Strip the album name from the individual track titles.

=item -s <text>

Strip text from the individual track titles.

=item -v

More verbose output.

=item -h

Shows this help for `youtube-rip`.

=back

=head1 AUTHOR

Mark Norman Francis, <http://marknormanfrancis.com/>
